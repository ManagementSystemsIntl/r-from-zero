---
title: "From Zero to GitHero"
title-block-banner: "#CACACA"
format: 
  html:
    code-fold: false
    css: styles.css
    toc: true
    embed-resources: true
    smooth-scroll: true
---

# Introduction

This resource is designed to help you get started with Git and GitHub in RStudio. It will guide you through the process of setting up Git and GitHub, creating a new repository, and connecting it to RStudio. By the end of this resource, you will be able to use Git and GitHub to manage your projects more effectively and collaborate with others.

But first, let's provide a little background on what these tools are and why you should use them in your projects.

**R** is a programming language and software environment for statistical computing and graphics. It is widely used by statisticians, data scientists, and researchers to analyze data, create visualizations, and build models.

**RStudio** is a powerful tool that makes it easier to write and run R code. It includes a console, a script editor, and tools for managing your workspace. RStudio also makes it easier to organize your projects and share your work with others.R and RStudio are complementary, but they are not the same thing.

**Git** is a version control system that allows you to track changes to your code and collaborate with others. It is a powerful tool that can help you manage your projects more effectively and work more efficiently. Git is especially useful when working on a project with multiple people, as it allows you to keep track of who made what changes and when. Jenny Bryan calls it "the "Track Changes" feature from Microsoft Word on steriods" [(Happy Git, 2020)](https://happygitwithr.com).

**GitHub** is a web-based platform that allows you to host your Git repositories online. It provides a place for you to store your code, collaborate with others, and share your work with the world.

## Why Use Git and GitHub?

There are many reasons to use Git and GitHub in your projects.

Here are a few of the key benefits:

-   **Version Control**: Git allows you to track changes to your code over time, so you can easily revert to an earlier version if needed.

-   **Collaboration**: Git makes it easy to work with others on a project, as it allows you to see who made what changes and when.

-   **Backup**: GitHub provides a secure place to store your code online, so you don't have to worry about losing it if your computer crashes.

-   **Portfolio**: GitHub is a great place to showcase your work and build a portfolio of projects that you can share with potential employers or collaborators.

-   **Reproducibility**: Git and GitHub help you keep track of your code, data, and analysis, so you can reproduce your results and share them with others.

Now, I hope I convinced you to start using Git and GitHub in your projects. So, let's get you set up.

# Getting Set Up

## Register a GitHub account

First, you need to sign up for a free account at [GitHub](https://github.com/) using your work email. You will need to do this before moving on to connect your GitHub to your RStudio.

### Some Username Advice

Taken from [Happy Git and GitHub for the useR.](https://happygitwithr.com/github-acct)

-   Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember.

-   Reuse your username from other contexts, e.g., Twitter or Slack.

-   Pick a username you will be comfortable revealing to your future boss.

-   Shorter is better than longer.

-   Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames.

-   Make it timeless. Don’t highlight your current university, employer, or place of residence, e.g. JennyFromTheBlock.

-   Avoid the use of upper vs. lower case to separate words. They highly recommend all lowercase. GitHub treats usernames in a case insensitive way, but using all lowercase is kinder to people doing downstream regular expression work with usernames, in various languages. A better strategy for word separation is to use a hyphen`-`.

## Install R and RStudio

1\) Download R for free from the [Comprehensive R Archive Network](https://cran.r-project.org/) (CRAN) and download RStudio for free from [Posit](https://www.rstudio.com/products/rstudio/); **OR**

2\) Use an [online version](https://posit.cloud/) of RStudio that is provided by Posit. This way you do not have to worry about what computer you have or installation permissions, amongst other things.

## Install Git

Next you will need to check whether Git is installed. If you went with option 2, rejoice, Git is pre-installed in Posit Cloud and you can skip this step.

If you went with option 1 above, open RStudio on your machine, go to the Terminal, type the following, and then enter/return.

`git --version`

If you get a version number, then you are done. If instead, you see something like `git: command not found`, then you need to install it.

### For Windows

Install [Git for Windows](https://git-for-windows.github.io/), also known as “Git Bash”.

Note that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. It is recommended to follow this convention.

If you already have Git for Windows, but it’s not the latest version, it’s a good idea to update. If you have a version older than 2.45.1, it is *highly* advisable to upgrade. You can update like so from the Terminal:

`git update-git-for-windows`

### For macOS

You may have noticed once you entered the command `git --version` in the Terminal, your machine elicited an offer to install developer command line tools. Accept the offer! Click on “Install”.

## Git Config

Now whether you went through the process to install everything to your machine, or if you took the easy way out (I don't blame you) and are using the online RStudio, it's time to configure your GitHub account to your machine.

Once again open RStudio, go to the Terminal, type the following, but with replacing with your user name from your GitHub account. Then press enter/return.

`git config --global user.name "jane.doe"`

Again in the Terminal, type the following, but with replacing with your email address from your GitHub account. Then press enter/return.

`git config --global user.email "jane@example.com"`

Finally to check that everything is set up correctly, type the following in the Terminal and press enter/return.

`git config --global --list`

Congratulations! You are now set up to use Git with RStudio. Now you can move on to the next section to learn how to set up a new repository on GitHub and connect it to RStudio.

# Setting Up Your Project

## Create a New Repository on GitHub

First, you need to create a new repository on GitHub. Follow the steps below to get started.

1.  Go to [GitHub](https://github.com/) and log in to your account.

2.  Click on the "+" sign in the top right corner and select "New repository".

3.  Enter a name for your repository and a description (optional).

4.  Choose whether you want your repository to be public or private.

5.  Click on "Create repository".

## Create a New Project in RStudio

Next, you will create a new project in RStudio and connect it to your GitHub repository.

1.  Open RStudio and click on "New Project" in the top right corner.

2.  Select "Version Control" and then "Git".

3.  Go to the repository you want to connect to on GitHub and click on the green "Code" button.

4.  Copy the URL of the repository and paste it in the "Repository URL" box.

5.  Choose a directory for your project and click "Create Project". We recommend to save all R projects in a folder on your desktop.

6.  You may be prompted to enter your GitHub username and password. Enter them and click "Sign In".

Success! Now that your project is set up, you can start working on your analysis and commit your changes to GitHub.

### A Note on Committing

When you make changes to your project, you will need to commit them to Git then push them to GitHub. This is like taking a snapshot of your project at a particular point in time.

> If you are working with others, it is best to communicate with them about what you are doing and what you are committing. Git errors can be a pain to fix, so it's best to avoid them.

To commit your changes, follow these steps:

1.  Go to the "Git" pane in RStudio.

2.  Check the box next to the files you want to commit.

3.  A new window will open. Add an informative message about the change that was made.

4.  Click on the "Commit" button.

5.  Finally, click “Push” to send the changes to GitHub.

There are a few files that do *not* need to be committed to Git. These include .gitignore and .Rproj files. The .gitignore file tells Git which files to ignore when committing changes. The .Rproj file is specific to RStudio and should not be committed to Git.

**Best practice is to pull at the beginning of your work session and commit then push your changes at the end of each work session.**

### A Note on Commit Messages

A general rule of thumb is to commit then push your changes often and write clear commit messages. This will make it easier to track your progress and collaborate with others.

The expectation of a good commit message is that it contains a short summary of the change, followed by a blank line, and then an explanation of the change including what the change is, and why it is being made. For instance, if your commit adds graphs to a paper, then a commit message could be:

```         
Add graphs

Graphs of unemployment and inflation added into Data section.
```

## Project Organization

Now that you have set up your project, it's time to organize it properly. Here are some tips to help you keep your project organized:

1.  Create a "data" folder to store your data files. You will want to create subfolders for each type of data, such as raw, prepared, and public.

2.  Create a "scripts" folder to store your R scripts.

3.  Create a "output" folder to store your plots, figures and tables. You will want to create subfolders for each type of relevant output (e.g., "viz","tables", "models").

4.  Create a "background docs" folder to store any background documentation or literature reviews.

5.  Create an "instruments" folder to store any instruments or questionnaires used in your project.

6.  Create a "reports" folder to store any reports or presentations related to your project.

This is the base structure of a project. You can add more folders as needed. For example, if you may need to include images, you can create an "images" folder.
