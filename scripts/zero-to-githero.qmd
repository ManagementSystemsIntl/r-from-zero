---
title: "From Zero to GitHero"
title-block-banner: "#CACACA"
format: 
  html:
    code-fold: false
    css: styles.css
    toc: true
    embed-resources: true
    smooth-scroll: true
---

# Introduction

This session is designed to help you get started with Git and GitHub in RStudio. It will guide you through the process of setting up Git and GitHub, creating a new repository, and connecting it to RStudio. By the end of this session, you will be able to use Git and GitHub to manage your projects more effectively and collaborate with others.

But first, let's provide a little background on what these tools are and why you should use them in your projects.

**R** is a programming language and software environment for statistical computing and graphics. It is widely used by statisticians, data scientists, and researchers to analyze data, create visualizations, and build models.

**RStudio** is a powerful tool that makes it easier to write and run R code. It includes a console, a script editor, and tools for managing your workspace. RStudio also makes it easier to organize your projects and share your work with others.R and RStudio are complementary, but they are not the same thing.

**Git** is a version control system that allows you to track changes to your code and collaborate with others. It is a powerful tool that can help you manage your projects more effectively and work more efficiently. Git is especially useful when working on a project with multiple people, as it allows you to keep track of who made what changes and when. Jenny Bryan calls it "the "Track Changes" feature from Microsoft Word on steriods" [(Happy Git, 2020)](https://happygitwithr.com).

**GitHub** is a web-based platform that allows you to host your Git repositories online. It provides a place for you to store your code, collaborate with others, and share your work with the world.

## Why Use Git and GitHub?

There are many reasons to use Git and GitHub in your projects.

Here are a few of the key benefits:

-   **Version Control**: Git allows you to track changes to your code over time, so you can easily revert to an earlier version if needed.

-   **Collaboration**: Git makes it easy to work with others on a project, as it allows you to see who made what changes and when.

-   **Backup**: GitHub provides a secure place to store your code online, so you don't have to worry about losing it if your computer crashes.

-   **Portfolio**: GitHub is a great place to showcase your work and build a portfolio of projects that you can share with potential employers or collaborators.

-   **Reproducibility**: Git and GitHub help you keep track of your code, data, and analysis, so you can reproduce your results and share them with others.

Now, I hope I convinced you to start using Git and GitHub in your projects. So, let's get you set up.

# The Beginnings with Git

In this section, we will cover creating a new repository in GitHub, connecting a repository to RStudio, the ins and outs of Git commands and how to properly set up your folder structure for your project. These are the beginning steps in getting started with Git.

## Create a New Repository

Follow the steps below to create a new repository on GitHub.

1.  Go to [GitHub](https://github.com/) and log in to your account.

2.  Click on the "+" sign in the top right corner and select "New repository".

3.  Enter a name for your repository and a description (optional).

4.  Select whether you want your repository to have a README file.

5.  Choose whether you want your repository to be public or private.

6.  Click on "Create repository".

## Create a New Project

### Posit Cloud

Follow the steps below to connect your GitHub repository to RStudio online.

1.  When in your Posit Cloud account, click on your name in the top right corner. You will see a drop down menu with the option "Authentication".

2.  Click on this then click on the "Enabled" button next to GitHub. You will be prompted to sign in to your GitHub account.

3.  After you have connected your GitHub account, you will go back to your workspace and select the button that says "New Project".

4.  Click on this button and you will see the option "New Project from Git Repository".

5.  Click on this option and you will be prompted to enter the URL of the repository you want to clone.

6.  Copy the URL from the repository you created on GitHub and paste it in the box. Click "OK".

An example URL will look like:

```         
https://github.com/ManagementSystemsIntl/r-from-zero
```

Success! Now that your project is set up, you can start working on your analysis and commit your changes to GitHub.

### RStudio Desktop Version

When you have a repository you want to clone to your machine, you will create a new project in RStudio and connect it to the GitHub repository.

1.  Open RStudio and click on "File" then "New Project" in the top left corner.

2.  Select "Version Control" and then "Git".

3.  Go to the repository you want to connect to on GitHub and click on the green "Code" button.

4.  Copy the URL under HTTPS and paste it in the "Repository URL" box.

5.  Choose a directory for your project and click "Create Project". We recommend to save all R projects in a folder on your desktop.

6.  You may be prompted to enter your GitHub username and password. Enter them and click "Sign In".

Success! Now that your project is set up, you can start working on your analysis and commit your changes to GitHub.

## A Few Things About Git

### A Note on Committing

When you make changes to your project, you will need to commit them to Git then push them to GitHub. This is like taking a snapshot of your project at a particular point in time.

> If you are working with others, it is best to communicate with them about what you are doing and what you are committing. Git errors can be a pain to fix, so it's best to avoid them.

To commit your changes, follow these steps:

1.  Go to the "Git" pane in RStudio.

2.  Check the box next to the files you want to commit.

3.  A new window will open. Add an informative message about the change that was made.

4.  Click on the "Commit" button.

5.  Finally, click “Push” to send the changes to GitHub.

There are a few files that do *not* need to be committed to Git. These include .gitignore and .Rproj files. The .gitignore file tells Git which files to ignore when committing changes. The .Rproj file is specific to RStudio and should not be committed to Git.

**Best practice is to pull at the beginning of your work session and commit then push your changes at the end of each work session.**

### A Note on Commit Messages

A general rule of thumb is to commit then push your changes often and write clear commit messages. This will make it easier to track your progress and collaborate with others.

The expectation of a good commit message is that it contains a short summary of the change, followed by a blank line, and then an explanation of the change including what the change is, and why it is being made. For instance, if your commit adds graphs to a paper, then a commit message could be:

```         
Add graphs

Graphs of unemployment and inflation added into Data section.
```

# Bonus Content

::::: box
::: box-header
Project Organization
:::

::: box-container
Now that you have set up your project, it's time to organize it properly. Here are the common folders you should include in your project:

1.  Create a "data" folder to store your data files. You will want to create subfolders for each type of data, such as raw, prepared, and public.

2.  Create a "scripts" folder to store your R scripts.

3.  Create a "output" folder to store your plots, figures and tables. You will want to create subfolders for each type of relevant output (e.g., "viz","tables", "models").

4.  Create a "background docs" folder to store any background documentation or literature reviews.

5.  Create an "instruments" folder to store any instruments or questionnaires used in your project.

6.  Create a "reports" folder to store any reports or presentations related to your project.

This is the base structure of a project. You can add more folders as needed. For example, if you may need to include images, you can create an "images" folder.
:::
:::::
